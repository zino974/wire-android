// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        maven {
            url "https://dl.bintray.com/wire-android/third-party"
        }
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.2'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.1'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'com.mutualmobile.gradle.plugins:dexinfo:0.1.2'
        classpath 'com.wire:gradle-android-scala-plugin:1.5.0'
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.13.1"
}

license {
    header = file('LICENSE_HEADER')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'Wire Swiss GmbH'
}

allprojects {
    repositories {
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task licenseFormatAndroid(type: nl.javadude.gradle.plugins.license.License) {
    source = fileTree(dir: getRootDir()).include([
            "**/*.java",
            "**/*.scala",
            "**/*.gradle",
            "**/*.xml",
    ]).exclude([
            "**/*build*",
            "**/*target*",
            "**/*gen*",
            "**/*generated*",
    ])
}
licenseFormat.dependsOn licenseFormatAndroid

ext {
    majorVersion = "2.25."

    compileSdkVersion = 24
    minSdkVersion = 17
    targetSdkVersion = 23
    buildToolsVersion = '24.0.3'
    scalaMajorVersion = '2.11'
    scalaVersion = scalaMajorVersion + '.8'
    sourceCompatibilityVersion = JavaVersion.VERSION_1_7
    targetCompatibilityVersion = JavaVersion.VERSION_1_7
    preDexLibs = !project.hasProperty('disablePreDex')

    checkstyleVersion = '6.18'
    pmdVersion = '5.4.1'
    supportLibVersion = '24.0.0'
    playServicesVersion = '10.0.1'

    audioVersion = System.getenv("AUDIO_VERSION") ?: '1.205.0@aar'
    zMessagingDevVersionBase = '88.1332'
    zMessagingDevVersion = "${zMessagingDevVersionBase}@aar"
    // Release version number must be like this X.0(.Y)
    zMessagingReleaseVersion = System.getenv("ZMESSAGING_VERSION") ?: '88.2.322@aar'

    avsVersion = '2.9.69@aar'
    avsInternalVersion = avsVersion //leave this here in case we want to test specific AVS versions on internal
    avsName = 'avs'
    avsGroup = 'com.wire'

    // proprietary avs artifact configuration
    customAvsVersion = '2.9.17@aar'
    customAvsInternalVersion = customAvsVersion
    customAvsName = 'avs'
    customAvsGroup = 'com.wearezeta.avs'

    deps = [
            scala               : "org.scala-lang:scala-library:$scalaVersion",

            // Lint dependencies
            lintapi              : 'com.android.tools.lint:lint-api:24.5.0',
            lintchecks           : 'com.android.tools.lint:lint-checks:24.5.0',

            // Checkstyle dependencies
            checkstyleapi        : "com.puppycrawl.tools:checkstyle:$checkstyleVersion",

            // Support libs
            multidex             : "com.android.support:multidex:1.0.1",
            supportv4            : "com.android.support:support-v4:$supportLibVersion",
            supportv13           : "com.android.support:support-v13:$supportLibVersion",
            supportdesign        : "com.android.support:design:$supportLibVersion",
            appcompatv7          : "com.android.support:appcompat-v7:$supportLibVersion",
            recyclerview         : "com.android.support:recyclerview-v7:$supportLibVersion",
            supportannotations   : "com.android.support:support-annotations:$supportLibVersion",
            preferences          : "com.android.support:preference-v7:$supportLibVersion",
            cardview             : "com.android.support:cardview-v7:$supportLibVersion",

            // Play services
            psBase               : "com.google.android.gms:play-services-base:$playServicesVersion",
            psGcm                : "com.google.android.gms:play-services-gcm:$playServicesVersion",
            psMaps               : "com.google.android.gms:play-services-maps:$playServicesVersion",
            psLocation           : "com.google.android.gms:play-services-location:$playServicesVersion",


            // Other
            roundedimageview     : 'com.makeramen:roundedimageview:2.2.0',
            timber               : 'com.jakewharton.timber:timber:4.1.1',
            hockey               : 'net.hockeyapp.android:HockeySDK:3.7.2',
            threetenabp          : 'com.jakewharton.threetenabp:threetenabp:1.0.3',
            localytics           : 'com.localytics.android:library:3.8.2',
            rebound              : 'com.facebook.rebound:rebound:0.3.8',
            supportpreferences   : 'net.xpece.android:support-preference:0.8.1',

            // For spotify
            spotifyAuth          : 'com.wire:spotify-auth:1.0.0-beta13@aar',

            // Internal
            audioNotifications   : "com.wire:audio-notifications:$audioVersion",

            // Test dependencies
            junit               : 'junit:junit:4.12',
            testutils           : "com.wire:testutils:$zMessagingDevVersionBase",
            scalatest           : "org.scalatest:scalatest_$scalaMajorVersion:2.2.6",
            testRunner          : 'com.android.support.test:runner:0.4.1',
            testRules           : 'com.android.support.test:rules:0.4.1',
            espresso            : 'com.android.support.test.espresso:espresso-core:2.2',
            espressoIntents     : 'com.android.support.test.espresso:espresso-intents:2.2',
            hamcrestCore        : 'org.hamcrest:hamcrest-core:1.3',
            hamcrestLib         : 'org.hamcrest:hamcrest-library:1.3',
            hamcrestIntegration : 'org.hamcrest:hamcrest-integration:1.3',

            mockitoCore         : 'org.mockito:mockito-core:1.10.19',
            //The dexmaker stuff is needed for Mockito to work completely
            dexmaker            : 'com.crittercism.dexmaker:dexmaker:1.4',
            dexmakerDx          : 'com.crittercism.dexmaker:dexmaker-dx:1.4',
            dexmakerMockito     : 'com.crittercism.dexmaker:dexmaker-mockito:1.4',

            // Translations
            translations        : 'com.wire:wiretranslations:1.+',

            //Json parser
            gson                : 'com.google.code.gson:gson:2.2.4'
    ]
}

allprojects {
    repositories {
        mavenLocal()
        maven { url "https://dl.bintray.com/wire-android/releases" }
        maven { url "https://dl.bintray.com/wire-android/snapshots" }
        maven { url "https://dl.bintray.com/wire-android/third-party" }
        maven { url "http://maven.localytics.com/public" }
        mavenCentral()
    }
}

if (project.file('user.gradle').exists()) {
    apply from: "user.gradle"
}


task ci(dependsOn: [
                    ':app:assembleDevDebug',

                    // Different Lint checks
                    ':app:lintDevDebug',
                    ':wire-core:lintDebug',
                    ':wire-ui:lintDebug',

                    // By default on whole app
                    ':app:checkstyle',
                    ':app:pmd'
                    ]) {

    doLast {
        def lintReportsPattern = /\/?(.*)\/build\/outputs\/lint-results\-(devDebug|debug)\.xml/
        def pmdReportsPattern = /\/?(.*)\/build\/reports\/pmd\/pmd\.xml/
        def checkstyleReportsPattern = /\/?(.*)\/reports\/checkstyle\/checkstyle\.xml/

        def results = new HashMap<String, Map<String, List<Issue>>>()
        def totalIssues = 0

        def findFilenameClosure = {
            if (it.isDirectory()) {
                return;
            }
            def absolutePath = it.getAbsolutePath()
            def foundIssues = new ArrayList<Issue>()
            def type = ''
            if (absolutePath.matches(lintReportsPattern)) {
                def issues = new XmlParser().parse(it)
                type = 'Lint'
                issues.issue.each {
                    def id = it.'@summary'
                    it.location.each { foundIssues.add(new LintIssue(id, it)) }
                }
            } else if (absolutePath.matches(pmdReportsPattern)) {
                def issues = new XmlParser().parse(it)
                type = 'PMD'
                issues.file.each {
                    def file = new File(it.'@name')
                    it.violation.each { foundIssues.add(new PmdIssue(file, it)) }
                }
            } else if (absolutePath.matches(checkstyleReportsPattern)) {
                def files = new XmlParser().parse(it)
                type = 'Checkstyle'
                files.file.findAll { it.children().size() > 0 }.each {
                    def file = new File(it.'@name')
                    it.error.each { foundIssues.add(new CheckstyleIssue(file, it)) }
                }
            }
            if (foundIssues.size() > 0) {
                if (!results.containsKey(type)) {
                    results.put(type, new HashMap<String, List<Issue>>())
                }
                results.get(type).put(it, foundIssues)
                totalIssues += foundIssues.size()
            }
        }

        rootProject.rootDir.eachFileRecurse(findFilenameClosure)

        if (totalIssues > 0) {
            def message = new StringBuilder()
            message.append("Found ${totalIssues} issue${totalIssues == 1 ? '' : 's'}\n\n")
            for (def entry : results.entrySet()) {
                def issues = new StringBuilder()
                def count = 0;
                for (def file : entry.value.entrySet()) {
                    issues.append("> ${file.value.size()} in ${file.key}\n")
                    file.value.each { issues.append("\t${it}\n")}
                    count += file.value.size()
                }
                message.append("${entry.key}: ${count} issue${count == 1 ? '' : 's'}\n")
                        .append(issues.toString())
                        .append('\n')
            }
            throw new Exception(message.toString())
        } else {
            println 'No issues found'
        }
    }
}

class Issue {
    File file
    String line
    String column
    String error

    @Override
    public String toString() {
        return "${file}:${line}:${column}: ${error}";
    }
}

class LintIssue extends Issue {
    def LintIssue(String error, Node location) {
        file = new File(location.'@file')
        line = location.'@line'
        column = location.'@column'
        this.error = error
    }
}

class PmdIssue extends Issue {
    def PmdIssue(File file, Node violation) {
        this.file = file
        def beginline = violation.'@beginline'
        def endline = violation.'@endline'
        line = beginline == endline ? beginline : "${beginline}-${endline}"
        column = violation.'@begincolumn'
        error = violation.text().replaceAll(/\n/, '')
    }
}

class CheckstyleIssue extends Issue {
    def CheckstyleIssue(File file, Node node) {
        this.file = file
        line = node.'@line'
        column = node.'@column'
        error = node.'@message'
    }
}
